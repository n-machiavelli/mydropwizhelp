package com.shekhar.reader30.representations;

/**
 * Created by sys_buajoku on 9/8/2014.
 */
import java.util.Date;
import java.util.UUID;

import org.codehaus.jackson.annotate.JsonIgnoreProperties;
import org.hibernate.validator.constraints.NotBlank;
import org.hibernate.validator.constraints.URL;

@JsonIgnoreProperties(ignoreUnknown = true)
/* output from mongodb below shows an extra field seems autogenerated "_id". so i either need to wrap around this variable
by creating a field for it or i use the above @JsonIgnoreProperties to ignore unused fields from the json
> db.blogs.find()
{ "_id" : ObjectId("540f31fb1fd7f8b625234188"), "id" : "83e72e29-a1b0-49e2-92f9-
193cfd626604", "title" : "Day 13: OpenCV--Face Detection for Java Developers", "
url" : "https://www.openshift.com/blogs/day-12-opencv-face-detection-for-java-de
velopers", "publishedOn" : ISODate("2014-09-09T16:59:39.179Z") }
 */
public class Blog {

    private String id = UUID.randomUUID().toString();

    @NotBlank
    private String title;

    @URL
    @NotBlank
    private String url;

    private final Date publishedOn = new Date();

    public Blog() {
    }

    public Blog(String title, String url) {
        super();
        this.title = title;
        this.url = url;
    }

    public String getId() {
        return id;
    }

    public String getTitle() {
        return title;
    }

    public String getUrl() {
        return url;
    }

    public Date getPublishedOn() {
        return publishedOn;
    }
}
/*
The Blog representation uses hibernate validator annotations to make sure the content is valid.
For example, we use @URL annotation to make sure only valid URLs are stored in the MongoDB database.
 */